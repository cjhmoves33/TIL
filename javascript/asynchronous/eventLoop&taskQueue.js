// 자바스크립트의 특징 중 하나는 싱글 스레드로 동작 한다는 것이다. 앞서 살펴본 바와 같이 싱글 스레드 방식은 한 번에 하나의 태스크만 처리할 수 있다는 것을 의미한다.
// 즉, 동시성을 가질 수 없다는 것이지만 실제로 자바스크립트로 코딩된 서비스(예를 들면 웹, 앱)는 동시성을 가지는 거처럼 느껴진다.
// 자바스크립트의 동시성(concurrency)를 지원하는 것이 바로 이벤트루프(event loop)다.
// 이벤트 루프는 브라우저에 내장되어 있는 기능 중 하나다.
// ------------------------------------------------------------------------------------------------------------
// ? 크롬 V8 자바스크립트 엔진을 비롯한 대부분의 자바스크립트 엔진은 크게 2개의 영역으로 구분할 수 있다.
// * 콜 스택(호출스택, 실행 컨텍스트 스택)
// 함수를 호출하면 함수 실행 컨텍스트가 콜 스택에 푸시되어 순차적으로 실행된다. 자바스크립트 엔진은 단 하나의 콜 스택을 사용하기 때문에 
// 최상위 실행 컨텍스트가 종료되어 콜 스택에서 제거되기 전까지 어떤 태스크도 실행되지 않는다.

// * 힙
// 힙은 객체가 저장되는 메모리 공간이다. 콜 스택의 요소인 실행 컨텍스트는 힙에 저장된 객체를 참조한다.
// 메모리에 값을 저장하려면 먼저 값을 저장할 메모리 공간의 크기를 결정해야 한다. 객체는 원시 값과 달리 크기가 정해져 있지 않으므로 할당해야 할 메모리 공간의 크기를 런타임에 결정해야 한다.
// 따라서 객체가 저장되는 메모리 공간인 힙은 구조화 되어 있지 않다는 특징이 있다.
// ------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------
// 이처럼 콜 스택과 힙으로 구성되어 있는 자바스크립트 엔진으 단순히 태스크가 요청되는면 콜 스택을 통해 요청된 작없을 순차적으로 실행할 뿐이다.
// 비동기 처리에서 소스코드의 평가와 실행을 제외한 모든 처리는 자바스크립트 엔진을 구동하는 환경인 브라우저 또는 Node.js가 담당한다.
// 예를 들어, 비동기 방식으로 동작하는 setTimeOut의 콜백 함수의 평가와 실행은 자바스크립트 엔진이 담당하지만 호출 스케줄링을 위한 타이머 설정과 콜백 함수의 등록은 브라우저 또는 Node.js가 담당한다.
// ? 이를 위해 브라우저 환경은 태스크 큐와 이벤트 루프를 제공한다.
// * 태스크 큐
// setTimeOut이나 setInterval과 같은 비동기 함수의 콜백 함수 또는 이벤트 핸들러가 일시적으로 보관되는 영역이다.
// 태스크 큐와는 별도로 프로미스의 후속 처리 메서드의 콜백 함수가 일시적으로 보관되는 마이크로태스크 큐도 존재한다.

// * 이벤트 루프
// 이벤트 루프는 콜 스택에서 현재 실행 중인 실행 컨텍스트가 있느니, 그라고 태스크 큐에 대기 중인 함수(콜백 함수, 이벤트 핸들러 등)가 있는지 반복해서 확인한다.
// 만약 콜 스택이 비어 있고 대기 중인 함수가 있다면 이벤트 루프는 순차적(FIFO)으로 태스크 큐에 대기 중인 함수를 콜 스택으로 이동시킨다.
// 이때 콜 스택으로 이동한 함수는 실행된다. 즉 , 태스크 큐에 일시 보관된 함수들은 비동기 처리 방식으로 동작한다.
// ------------------------------------------------------------------------------------------------------------

// 비동기 함수인 setTimeOut의 콜백 함수는 타이머 만료후 태스크 큐에 푸시되어 대기하다가 콜 스택이 비게 되면, 다시 말해 전역 코드 및 명시적으로 호출된 함수가 모두 종료되면 비로소 콜스택에 푸시되어 실행된다.
// setTimeOut함수는 호스트 객체이지만 함수는 함수다. 태스크 큐에서 콜스택으로 푸시돨 때 실행 컨텍스트를 생성하고 실행된다.
// 자바스크립트는 싱글 스레드 방식으로 동작한다. 이때 싱글 스레드 방식으로 동작하는 것은 브라우저가 아니라 브라우저에 내장된 자바스크립트 엔진이다. 브라우저는 멀티 스레드로 동작한다.
// 브라우저는 자바스크립트 엔진 외에도 렌더링 엔진과 We bAPI를 제공한다. Web APIs는 ECMAScript 사양에 정의된 함수가 아니라 브라우저에서 제공하는 API이며,
// DOM API와 타이머 함수, HTTP 요청(Ajax)과 같은 비동기 처리를 포함한다.
// 브라우저의 Web API인 setTimeOut 함수가 호출 되면 자바스크립트 엔진인 콜 스택에 푸시되어 실행된다.

// 하지만 setTimeOut 함수의 두 가지 기능인 타이머 설정과 타이머가 만료되면 콜백 함수를 태스크 큐에 등록하는 처리는 자바스크립트 엔진이 아니라 브라우저가 실행한다.
// 이처럼 브라우저와 자바스크립트 엔진이 협력하여 비동기 함수인 setTimeOut함수를 실행한다.