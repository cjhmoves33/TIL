// ? 실행 컨텍스트에서 스코프를 기반으로 식별자와 식별자에 바인딩된 값(식별자 바인딩)을 관리하는 방법, 호이스팅 발생 이유, 클로저의 동작방식,
// ? 테스크 큐와 함께 동작하는 이벤트 핸들러와 비동기 처리의 동작 방식을 이해할 수 있다.

// 모든 소스코드는 실행전 평가 과정을 거친다. 자바스크립트는 소스코드를 평가와 실행으로 나눠서 처리한다.

// 소스코드 평가 과정에서는 실행 컨텍스트를 생성하고 변수, 함수 등의 '선언문'만 먼저 실행하여 생성된 변수나 함수 식별자를 키로
// 실행 컨텍스트가 관리하는 스코프(렉시컬 환경의 환경 레코드)에 등록한다.

// ? 일단은 실행 실행컨텍스트의 렉시컬 환경의 환경 레코드를 '실행 컨텍스트의 스코프'로 칭한다.(사실 맞는 말이기도 하다.)

// 소스코드 평가 과정이 끝나면 비로소 선언문을 제외한 소스코드가 순차적으로 실행되기 시작한다.(런타임이 시작된다.)
// 이때 소스코드 실행에 필요한 정보, 즉 변수나 함수의 참조를 실행 컨텍스트가 관리하는 스코프에서 검색해서 취득한다.
// 그리고 변수 값의 변경 등 소스코드의 실행 결과는 다시 실행 컨텍스트가 관리하는 스코프에 등록된다.

// ex
var x;
x = 1;
// 자바스크립트 엔진은 위 예제를 2개의 과정으로 나누어 처리한다. 먼저 소스코드 평가 과정에서 변수 선언문 var x;를 먼저실행한다.
// 이때 생성된 변수 식별자 x는 실행 컨텍스트가 관리하는 스코프에 등록되고 undefined로 초기화 된다.
//    | execution context |
//    |  x : undefined    |
// 소스코드 평가 과정이 끝나면 비로소 소스코드 실행 과정이 시작된다. 변수 선언문 var x;는 소스코드 평가 과정에서 이미 실행이 완료되었다.
// 따라서 소스코드 실행 과정에서는 변수 할당문 x = 1; 만 실행된다. 이때 x 변수에 값을 할당하려면 먼저 x 변수가 선언된 변수인지 확인해야 한다.
// 이를 위해 실행 컨텍슽트가 관리하는 스코프에 x 변수가 등록되어 있는지 확인한다. 다시 말해 x 변수가 선언된 변수인지 확인한다.
// 만약 x 변수가 실행 컨텍스트가 관리히는 스코프에 등록되어 있다면 x 변수는 선언된 변수, 즉 소스코드 평가 과정에서 선언문이 실행되어 등록된 변수다.
// x 변수가 선언된 변수라면 값을 할당하고 할당 결과를 실행 컨텍스트에 등록하여 관리한다.
//    | execution context |
//    |  x : 1            |