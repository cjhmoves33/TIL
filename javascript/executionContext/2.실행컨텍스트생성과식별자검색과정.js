var x = 1;
const y = 2;

function foo(a) {
  var x = 3;
  const y = 4;

  function bar(b) {
    const z =5;
    console.log(a + b + x + y + z);
  }
  bar(10);
}

foo(20);

// ------------------------------------------------------------------------------------------------------------
// ? 0. 전역 객체 생성
// 전역 객체는 전역 코드가 평가되기 이전에 생성된다. 이때 전역 객체에는 빌트인 전역 프로퍼티와 빌트인 전역 함수, 그리고 표준 빌트인 객체가 추가되며 동작 환경(클라이언트 사이드 또는 서버사이드)에 따라
// 클라이언트 사이드 Web API(DOM, BOM, Canvas, XMLHttpRequest, fetch, requestAnimationFrame, SVG, Web Storage, Web Component, Web Worker 등) 또는
// 특정 환경을 위한 호스트 객체를 포함한다. 전역 객체도 Object.prototype을 상속받는다. 즉, 전역 객체도 프로토 타입 체인의 일원이다.
// ------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------
// ? 1. 전역 코드 평가
// 소스코드가 로드되면 자바스크립트 엔진은 다음과 같은 순서로 전역 코드를 평가를 진행한다.
// 1. 전역 실행 컨텍스트 생성
// 2. 전역 렉시컬 환경 생성
//  2-1. 전역 환경레코드 생성
//   2-1-1. 객체 환경 레코드 생성
//   2-1-2. 선언적 환경 레코드 생성
//  2-2. this 바인딩
//  2-3. 외부 렉시컬 환경에 대한 참조 결정

//  * 1. 전역 실행 컨텍스트 생성
//  먼저 비어 있는 전역 실행 컨텍스트를 생성하여 실행 컨텍스트 스택에 푸시한다. 이때 전역 실행 컨텍스트는 실행 컨텍스트 스택의 최상위, 즉 실행 중인 컨텍스트가 된다.

//  * 2. 전역 렉시컬 환경 생성
//  전역 렉시컬 환경(Global Lexical Environment)을 생성하고 전역 실행 컨텍스트에 바인딩한다.
//  *  2-1. 전역 환경 레코드 생성
//  전역 렉시컬 환경을 구성하는 컴포넌트인 전역 환경 레코드(Global Environment Record)는 전역 변수를 관리하는 전역 스코프, 전역 객체의 빌트인 전역 함수, 표준 빌트인 객체를 제공한다.
//  모든 전역 변수가 전역 객체의 프로퍼티가 되는 ES6 이전에는 전역 객체가 전역 환경 레코드의 역할을 수행했다. 하지만 ES6의 let, const 키워드로 선언한 전역변수는 전역 객체의 프로퍼티가 되지 않고 개념적인 블록 내에 존재하게 된다.
//  var 키워드, let, const 키워드로 선언한 전역 변수를 구분하여 관리하기 위해 전역 스코프 역할을 하는 전역 환경 레코드는
//  ? 객체 환경 레코드(Object Environment Record)와 선언적 환경 레코드(Declarative Environment Record)로 구성되어 있다.
//  객체 환경 레코드는 기존의 전역 객체가 관리하던 var 키워드로 선언한 전역 변수와 함수 선언문으로 정의한 전역 함수, 빌트인 전역 프로퍼티와 빌트인 전역 함수, 표준 빌트인 객체를 관리하고,
//  선언적 환경레코드는 let, const 키워드로 선언한 전역 변수를 관리한다. 즉, 전역 환경 레코드의 객체 환경 레코드와 선언적 환경 레코드는 서로 협력하여 전역 스코프와 전역 객체(전역 변수의 전역 객체 프로퍼티화)를 관리한다.
//  *  2-1-1. 객체 환경 레코드 생성
//  전역 환경 레코드를 구성하는 컴포넌트인 객체 환경 레코드는 BindingObject라고 부르는 객체(전역코드 평가이전에 생성된)와 연결된다.
//  ? 전역 코드 평가 과정에서 var 키워드로 선언한 전역 변수와 함수 선언문으로 정의된 전역 함수는 전역 환경 레코드의 객체 환경 레코드에 연결된 BindingObjectㅇ를 통해 전역 객체의 프로퍼티와 메서드가 된다.
//  그리고 이때 등록된 식별자를 전역 환경 레코드의 객체 환경 레코드에서 검색하면 전역 객체의 프로퍼티를 검색하여 반환한다.
//  이것이 var 키워드로 선언된 변수와 함수 선언문으로 정의된 전역 함수가 전역 객체의 프로퍼티와 메서드가 되고 전역 객체를 가리키는 식별자(예를 들어 브라우저에서는 window) 없이 전역 객체의 프로퍼티를 참조 할 수 있는 메커니즘이다.
//  맨위 예제의 x 변수는 var 키워드로 선언한 변수다. 따라서 선언단계와 초기화단계가 동시에 진행된다. 다시말해 전역 코드 평가 시점에 객체 환경 레코드에 바인딩된 BindingObject를 통해
//  전역 객체에 변수 식별자를 키로 등록한 다음, 암묵적으로 undefined를 바인딩한다.
//  ? 이것이 호이스팅이 발생하는 원인이다.
//  함수 선언문으로 정의한 함수가 평가되면 함수 이름과 동일한 이름의 식별자를 객체 환경 레코드에 바인딩된 BindingObject를 통해 전역 객체에 키로 등록하고 생성된 함수 객체를 즉시 할당한다.
//  함수 선언문으로 정의한 함수는 함수 선언문 이전에 호출할 수 있는 이유다.(변수 호이스팅과 함수 호이스팅의 명확한 차이점.)
//  *  2-1-2. 선언적 환경 레코드 생성
//  let, const 키워드로 선언한 전역 변수(let, const 변수에 할당한 함수 표현식 포함)는 선언적 환경 레코드에 등록되고 관리된다.
//  ES6의 let, const 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 되지않고 개념적 블록 내에 존재하게 되는데, 이 개념적 블록이 전역 환경 레코드의 선언적 환경 레코드다.
//  따라서 위 예제의 전역 변수 y는 전역 객체의 프로퍼티가 되지않는다. 또한 let, const 키워드로 선언한 변수는 선언단계와 초기화 단계가 분리되어 진행한다.
//  즉 런타임에 실행 흐름이 변수 선언문에 도달하기 전까지 일시적 사각지대(TDZ)에 빠지게 된다.
//  *  2-2. this 바인딩
//  전역 환경 레코드의 [[GlobalThisValue]] 내부 슬롯에 this가 바인딩 된다. 일반적으로 전역 코드에서 this는 전역 객체를 가리키므로 전역 환경 레코드의 [[GlobalThisValue]] 내부슬롯에 전역 객체가 바인딩된다.
//  전역 코드에서 this를 참조하면 전역 환경 레코드의 [[GlobalThisValue]] 내부 슬롯에 바인딩되어 있는 객체가 반환된다.
//  *  2-3. 외부 렉시컬 환경에 대한 참조 결정
//  외부 렉시컬 환경에대한 참조(Outer Lexical Environment Reference)는 현재 평가 중인 소스코드를 포함하는 외부소스코드의 렉시컬 환경, 즉 상위 스코프를 가리킨다.
//  이를 통해 단방향 링크드 리스트인 스코프 체인을 구현한다.
//  전역 코드를 포함하는 소스코드는 없으므로 전역 렉시컬 환겨의 외부 렉시컬 환경에 대한 참조에 null이 할당된다. 이는 전역 렉시컬 환경이 스코프 체인의 종점임을 의미한다.
// ------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------
// ? 2. 전역코드 실행 
// 이제 전역 코드가 순차적으로 실행되기 시작한다. 변수 할당문이 실행되어 전역 변수 x, y에 값이 할당된다. 그리고 foo 함수가 호출된다.
// 변수 할당문 또는 함수 호출문을 실행하려면 먼저 변수 또는 함수 이름이 선언된 식별자인지 확인해야 한다. 선언되지 않은 식별자는 참조할 수 없으므로 할당이나 호출도 할 수 없기 때문이다.
// 또한 식별자는 스코프가 다르면 같은 이름을 가질 수 있다. 즉 동일한 이름의 식별자가 다른 스코프에 여러개 존재할 수 있다.
// 따라서 어느 스코프의 식별지를 참조하면 되는지 결정할 필요가 있다. 이를 '식별자 결정'이라고 한다.
// * 식별자 결정을 위햐 식별자를 검색할 때는 실행 중인 컨텍스트에서 식별자를 검색하기 시작한다.
// 선언된 식별자는 실행 컨텍스트의 렉시컬 환경의 환경 레코드에 등록되어 있다.
// 만약 실행 중인 실행 컨텍스트의 렉시컬 환경에서 식별자를 검색할 수 없다면 외부 렉시컬 환경에대한 참조가 가리키는 렉시컬환경 즉, 상위 스코프로 이동하여 식별자를 검색한다. 이것이 스코프 체인의 동작이다.
// 스코프 체인으로 전역 렉시컬환경까지 도달했지만 식별자를 검색할 수 없으면 참조 에러 (Reference Error)를 발생시킨다.(식별자 결정을 실패했음을 뜻한다.)
// ------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------
// ? 3. foo 함수 코드 평가
// foo 함수가 호출되면 전역 코드의 실행을 일시 중단하고 foo 함수 내부로 코드의 제어권이 이동한다. 그리고 아래의 순서로 함수 코드를 평가하기 시작한다.
// 1. 함수 실행 컨텍스트 생성
// 2. 함수 렉시컬 환경 생성
//  2-1. 함수 환경 레코드 생성
//  2-2. this 바인딩
//  2-3. 외부 렉시컬 환경에 대한 참조 결정

//  * 1. 함수 실행 컨텍스트 생성
// 먼저 foo 함수 실행 컨텍스트를 생성한다. 생성된 함수 실행 컨텍스트는 함수 렉시컬 환경이 완성된 다음 호출 스택에 푸시된다. 이때 foo 함수 실행 컨텍스트는 호출 스택의 최상위, 즉 실행중인 실행 컨텍스트가 된다.
//  * 2. 함수 렉시컬 환경 생성
// foo 함수 렉시컬 환경을 생성하고 foo 함수 실행 컨텍스트에 바인딩한다.
//   * 2-1. 함수 환경 레코드 생성
// 함수 렉시컬 환경을 구성하는 컴포넌트 중 하나인 함수 환경 레코드(Function Environment Record)는 매개변수, arguments객체, 함수 내부에 선언된 지역 변수와 중첩 함수를 등록하고 관리한다.
//   * 2-2. this 바인딩
// 함수 환경 레코드의 [[ThisValue]] 내부 슬롯에 this가 바인딩 된다. 여기서 [[ThisValue]] 내부 슬롯에 바인딩될 객체는 함수 호출 방식에 따라 결정된다.
// foo 함수는 일반 함수로 호출되었으므로 this는 전역 객체를 가리킨다. foo 함수 내부에서 this를 참조하면 함수 환경 레코드의 [[ThisValue]] 내부 슬롯에 바인딩되어 있는 객체가 반환된다.
//   * 2-3. 외부 렉시컬 환경에 대한 참조 결정
// 외부 렉시컬 환경에대한 참조에 'foo 함수 정의가 평가'된 시점에 실행 중인 컨텍스트의 렉시컬 환경의 참조가 할당된다.
// 자바스크립트 엔진은 함수 정의를 평가하여 함수 객체를 생성할 때 현재 실행 중인 실행 컨텍스트의 렉시컬 환경, 즉 함수의 상위 스코프를 함수 객체의 내부 슬롯 [[Environment]]에 저장한다.
// 함수 렉시컬 환경의 외부 랙시컬 환경에 대한 참조에 할당되는 갓은 바로 함수의 상위 스코프를 가리키는 함수 객체의 내부 슬롯 [[Environment]] 에 저장된 렉시컬 환경의 참조다. 이것이 렉시컬 스코프를 구현하는 메커니즘이다.
// 함수 객체의 내부슬롯 [[Environment]]와 렉시컬 스코프가 클로저를 이해할 수 있는 중요한 단서다.
// ------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------
// ? 4. foo 함수 코드 실행
// 런타임이 시작되어 foo 함수의 소스코드가 순차적으로 실행되기 시작한다. 매개변수에 인수가 할당되고 변수 할당문이 실행되어 지역 변수 x, y에 값이 할당된다. 그리고 함수 bar가 호출 된다.
// 이때 식별자 결정을 위해 실행 중인 실행 컨텍스트의 렉시컬 환경에서 식별자를 검색하기 시작한다.
// 만약 실행중인 실행 컨텍스트의 렉시컬 환경에서 식별자를 검색할 수 없으면 스코프 체인을 통해 식별자를 검색한다.
// ------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------
// ? 5. bar 함수 코드 평가
// bar 함수가 호출되면 bar 함수 내부로 코드의 제어권이 이동한다. 그리고 bar 함수 코드를 평가하기 시작한다.
// ------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------
// ? 6. bar 함수 코드 실행
// 런타임이 시작되어 bar 함수의 소스코드가 순차적으로 실행되기 시작한다. 매개변수에 인수가 할당되고 변수 할당문이 실행되어 지역 변수 z에 값이 할당된다.
// 그리고 console.log(a + b + x + y + z)가 다음과 같은 순서로 실행된다.
// 1. console 식별자 검색
// 먼저 console 식별자를 스코프 체인에서 검색한다. 스코프 체인은 현재 실행 중인 실행 컨텍스트의 렉시컬 환경에서 시작하여 외부 렉시컬 환경에 대한 참조로 이어지는 렉시컬 환경의 연속이다.
// 스코프 체인을 통해(외부 렉시컬 환경에 대한 참조의 연속)전역 렉시컬 환경까지 이동하여 console 식별자를 검색한다.
// 전역 렉시컬 환경은 객체 환경 레코드와 선언적 환경 레코드로 구성되어 있다. console 식별자는 객체 환경 레코드의 BindingObject에 바인딩 되어 있는 전역 객체에서 찾을 수 있다.
// 2. log 메서드 검색
// console 식별자에 바인딩된 객체(console객체)에서 log메서드를 검색한다. 이때 console 객체의 프로토타입 체인을 통해 메서드를 검색한다. log 메서드는 상속된 프로퍼티가 아니라
// console 객체가 직접 소유하는 프로퍼티다.
// 3. 표현식 a + b + x + y + z의 평가
// a + b + x + y + z를 평가하기 위해 식별자들을 검색한다.
// 4. console.log메서드 호출
// 표현식 a + b + x + y + z가 평가되어 생성한 값 42를 console.log메서드에 전달하여 호출한다.
// ------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------
// ? 7. bar 함수 코드 실행 종료
// console.log 메서드가 호출되고 종료하면 더는 생성할 코드가 없으므로 bar 함수 코드의 실행이 종료된다.
// * 함수가 종료된다는 것은 return을 만났음을 뜻한다. 
// * 함수의 특성상 명시적인 return이 없으면 암묵적으로 undefined를 러턴하기때문에 함수코드의 마지막에 다다르면 함수의 종료를 뜻하게 된다.
// 이때 호출 스택에서 bar 함수 실행 컨텍스트가 팝되어 제거되고 foo 실행 컨텍스트가 실행 중인 실행 컨텍스트가 된다.

// 실행 컨텍스트에서 bar 함수 실행 컨텍스트가 제되었다고 해서 bar 함수 렉시컬 환경까지 즉시 소멸하는 것은 아니다. 렉시컬 환경은 실행 컨텍스에 의헤 참조되기는 하지만 독립적인 객체다.
// 객체를 포함한 모든 값은 누군가에 의해 참조되지 않을 때 비로소 가비지 컬렉터에 의해 메모리 공간의 확보가 해제되어 소멸한다.
// bar 함수 실행 컨텍스트가 소멸되었다 하더라도 만약 bar 함수 렉시컬 환경을 누군가 참조하고 있다면 bar 함수 렉시컬 환경은 소멸하지 않는다.
// ------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------
// ? 8. foo 함수 코드 실행 종료
// bar 함수가 종료되면 더 이상 실행할 코드가 없으므로 foo 함수 코드의 실행이 종료된다. 이 때 호출 스택에서 foo 함수 컨텍스트가 팝되오 제거되고 전역 실행 컨텍스트가 실행 중인 실행 컨텍스트가 된다.
// ------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------
// ? 9. 전역 코드 실행 종료
// foo 함수가 종료되면 더는 실행할 전역 코드가 없으므로 전역 코드의 실행이 종료되고 전역 실행 컨텍스트도 호출 스택에서 팝되어 호출 스택에는 아무것도 남아있지 않게 된다.
// ------------------------------------------------------------------------------------------------------------


