// 자바스크립트 엔진은 암묵적인 처리를 통해 인스턴스를 생성하고 반환한다. new 연산자와 함께 생성자 함수를 호출하면 자바스크립트 엔진은 암묵적으로
// 인스턴스를 생성하고, 인스턴스를 초기화한 후, 암묵적으로 인스턴스를 반환한다.

// 1. 인스턴스 생성과 this 바인딩
// 암묵적으로 빈 객체가 생성된다. (아직 완성되지 않은)이 빈 객체가 생성자 함수가 생성한 인스턴스다.
// 그리고 암묵적으로 생성된 빈 객체(인스턴스)는 this에 바인딩 된다. 생성자 함수 내부의 this가 생성자 함수가 생성할 인스턴스를 가리키는 이유가 이것이다.
// 이 처리는 런타임 이전에 실행된다.

// 2. 인스턴스 초기화
// 생성자 함수에 기술되어 있는 코드가 한 줄씩 실행되어 this에 바인딩되어 있는 인스턴스를 초기화한다.
// 즉 this에 바인딩되어 있는 인스턴스에 프로퍼티나 메서드를 추가하고 생성자 함수가 인수로 전달받은 초기값을 인스턴스 프로퍼티에 할당하여 초기화하거나 고정값을 할당한다.

// 3. 인스턴스 반환
// 생성자 함수 내부의 모든 처리가 끝나면 완성된 인스턴스가 바인딩된 'this가 암묵적으로 반환'된다.

function Circle(radius) {
  // 1. 암묵적으로 빈 객체가 생성되고 this에 바인딩된다. 

  // 2. this에 바인딩되어 있는 인스턴스를 초기화한다.
  this.radius = radius;
  this.getDiameter = function() {
    return 2 * this.radius;
    // getDiameter는 this에 바인딩되고(생성자 함수로서 호출된경우), getDiameter을 호출할 경우 함수 리터럴의 this는 메서드로서 호출되기 때문에 호출자를 this로 갖는다.
  }

  // 3. 암묵적으로 this를 반환한다.
  // 명시적으로 객체를 반환하면 암묵적인 this 반환이 무시된다. 명시적으로 원시 값을 반환하면 원시값 반환은 무시된다.(this 반환)
  // return {};
}