// ? 단방향 암호화(crypto)
// ! 암호화와 해싱은 다른것이다.
// * 함호화는 가능하지만 복호화는 불가능(단방향)
// * 단방향 암호화의 대표주자는 해시 기법(hash function)
// 문자열을 고정된 길이의 다른 문자열로 바꾸는 방식 -> 특정한 값은 항상 그에 일대일 대응하는 값이 존재한다.
// 사실 해싱된 값은 레인보우테이블, 브루트포스등으로 다시 원래 값으로 돌릴 수 있는 방법이 있으나 너무오래걸려 해커들이 잘 시도하지는 않고, 해싱된 값에 솔트라는 것을 추가해서 더 복잡한 암호화도 가능하다.
// 해시 기법은 알고리즘만 잘 선택하면 안전한 기법이다.

// ? createHash(알고리즘): 사용할 해시 알고리즘을 넣어준다.
// md5, sha1, sha256, sha512  등이 있지만 ,md5, sha1은 이미 취약점이 발견되었다.
// 현재는 sha512 정도로 충분하지만, 나중에 sha512도 취약해지면 더 강화된 알고리즘으로 바꿔야한다.

// ? update(문자열): 변환할 문자열을 넣어준다.

// ? digest(인코딩): 인코딩할 알고리즘을 넣어준다.
// base64, hex, latin1이 주로 사용되는데, 그중 base64가 결과 문자열이 가장짧아 애용된다. 결고물로 변환된 문자열을 반환한다.

const crypto = require('crypto');

console.log('base 64: ', crypto.createHash('sha512').update('비밀번호123').digest('base64'));
console.log('hex: ', crypto.createHash('sha512').update('비밀번호123').digest('hex'));
console.log('latin1: ', crypto.createHash('sha512').update('비밀번호123').digest('latin1'));

// * 서버에는 '비밀번호123'을 저장하는 것이아니라, 해싱된 값을 저장한다.

