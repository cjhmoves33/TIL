-----------------------------------------------------------------------------------
react로도 웹사이트를 만드는 대에 문제없다.

next의 장단점
장점
  next는 리액트를 사용한 프레임워크.(실무를 위해 갖춰진 것들이 많다.)
  SSR을 지원한다.
단점
  프레임워크 특성상 정해진 틀에서 코딩을 해야하기 때문에 자유도가 떨어지는 것도 맞음.
-----------------------------------------------------------------------------------



-----------------------------------------------------------------------------------
- 전통적인 SSR -
'클라이언트(브라우저)': 페이지 요청 -> '프론트서버': 데이터 요청-> '백엔드 서버': 데이터 요청 -> '데이터베이스' ↓
'클라이언트(브라우저)'  <- html과 데이터를 합쳐서 전송: '프론트서버 '<- 데이터 전송: '백엔드서버' <- 데이터 전송: '데이터 베이스'

장점: 한번에 모든 데이터를 받아오기 때문에 화면에 모든 데이터를 한번에 보여줄 수 있다.
단점: 오래걸린다.


- 리액트, 뷰, 앵귤러 방식 (CSR) -
1. '브라우저': 페이지 요청 -> '프론트 서버': 데이터없는 페이지만 전송(보통 로딩화면) -> '브라우저'
2. '브라우저': 데이터 요청 -> '백엔드 서버': 데이터 전송 -> '브라우저'

장점: 일단 로딩창만 먼저 보여주기 때문에 데이터를 가져오는 동안의 시간을 잠시 벌 수 있다.(비즈니스적인 장점) 사실 이 방식이 비슷하거나 더 오래 걸릴 수 도 있다.
     리액트를 사용할지 말지에 대해 잘 생각해 봐야한다.
-----------------------------------------------------------------------------------



-----------------------------------------------------------------------------------
검색엔진에 따라 (리액트로 만든 사이트의 경우)사이트 방문시 로딩페이지만 확인하고 데이터가 없다고 판단.
이를 해결하는 방법이 SSR, 코드 스플리팅(방문한 페이지에대한 코드만 보내준다.) 이 있다.
서버사이드렌더링의 경우 페이지의 첫방문만 전통적인 방법으로 하고 페이지전환 시 리액트의 방법을 한다.

실제 고객을 대상으로 하는 웹사이트를 만들 때 SSR, 코드 스플리팅이 모두 들어가도록 한다. (next.js, 꼭 next만 SSR을 지원하는 것은 아니다.)
admin페이지와 같이 페이지로딩시간에 의미가 없는 페이지는 next를 사용할 필요가 없다.(코드가 복잡해기지만 한다. react만 사용하면 됨.)

주소창을 이용하거나 검색해서 들어오는 등 해당페이지의 최초방문시(해당 페이지만) 전통SSR방식을 사용하기 때문에 별도의 로딩창이 나오는 것을 볼 수없다.
그 후 Link, a태그 등으로 다른 컴포넌트에 접근하면(리액트 방식) 로딩화면이 보이고 페이지가 로딩이 완료된다.
이때 코드스플리팅을 하는이유는 원래 리액트 방식(CSR)은 브라우저에서 프론트서버로 페이지를 요청하면 프론트서버는 js에 모든 페이지를 다담아서 주는 방식인데
이는 너무 비효율적이다. 그래서 해당 url에대한 js파일만 쪼개서 준다. 대신 다른 페이지에 들어가면 이 과정을 반복하게된다.(아주짧은 시간을 소요)
그 후 브라우저가 다시 백엔드 서버에서 페이지에대한 데이터를 받아오고 화면에 보여준다.

결국 SSR, CSR을 필요에 따라 모두 활용해야한다.
-----------------------------------------------------------------------------------



-----------------------------------------------------------------------------------
리액트에서 JSX를 사용할 때 import React from 'react'를 해줘야 하지만 next를 쓸 때는 안써줘도 된다.
next를 사용할 때 pages폴더는 반드시 이름이 pages여야 하는데 그 안에 있는 파일들을 next가 '코드스플리팅 된 페이지 컴포넌트'로 만들어주기 때문이다.
pages폴더의 index.js(jsx)파일은 http://도매인/ 에 자동적용된다. 메인페이지는 반드시 index.js(jsx)로 해야한다.
-----------------------------------------------------------------------------------



-----------------------------------------------------------------------------------
eslint를 적용하고나면 import React를 안한거에 대해 빨간줄이 생기는데 .eslint의 rules 설정에서 해결가능.
"rules": {
    "react/react-in-jsx-scope": "off"
  }


./vscode/setting.json 세팅
{
  "eslint.validate": [
      "vue",
      "javascript",
      "javascriptreact",
      "html"
  ],
  "eslint.alwaysShowStatus": true,
  "editor.codeActionsOnSave": {
      "source.fixAll.eslint": true
  }
}
-----------------------------------------------------------------------------------



-----------------------------------------------------------------------------------
SSR을 하려면 react, node.js(꼭 node.js여야 하는것은 아니다) 모두 있어야한다.
브라우저 - 백엔드간 요청에 CORS설정이 필요하다.
-----------------------------------------------------------------------------------