// 실행 컨텍스트 스택(aka 콜스택 or 호출스택)
// ? 나는 실행 컨텍스트 스택을 호출 스택으로 기재함.
const x = 1;
function foo () {
  const y = 2;
  function bar () {
    const z = 3;
    console.log(x + y + z);
  }
  bar();
}
foo();

// 위 예제는 소스코드의 타입으로 분류할 때 전역 코드와 함수 코드로 이루어져 있다. 자바스크립트 엔진은 먼저 전역 코드를 평가하여 '전역 실행 컨텍스'를 생성한다.
// 그리고 함수가 호출되면 함수 코드를 평가하여 함수 실행 컨텍스트를 생성한다.
// 이때 생성된 실행 컨텍스트는 스택(stack)자료구조로 관리된다. 이를 실행 컨텍스트 스택 이라고 부른다.
// 위 코드를 실행하면 코드가 실행되는 시간의 흐름에 따라 실행 컨텍스트 스택에는 다음과 같이 실행 컨텍스트가 추가(push)되고 제거(pop) 된다.
// |               |    |                  |     |                  |    | console.log 함수 실행 컨텍스트|
// |               |    |                  |     | bar함수 실행 컨텍스트 |   | bar함수 실행 컨텍스트         |
// |               | -> | foo함수 실행 컨텍스트 | -> | foo함수 실행 컨텍스트 | -> | foo함수 실행 컨텍스트         | -> 여기서부터 각 컨텍스트 별 실행을 완료하면
// | 전역 실행 컨텍스트 |   | 전역 실행 컨텍스트    |     | 전역 실행 컨텍스트    |   | 전역 실행 컨텍스트            |     순차적으로 pop하기때문에 이하 생략
//                                             [↑호출 스택↑]

// * 1. 전역 코드의 평가와 실행
// 자바스크립트 엔진은 먼저 전역 코드를 평가하여 전역 실행 컨텍스를 생성(전역 실행 컨텍스트의 경우에만 빈 실행 컨텍스를 생성한 직후 호출스택에 올린다.(실행 컨텍스를 완성시키고 올리지 않는다.))
// 하고 호출 스택에 푸시한다. 이때 전역 변수 x와 전역 함수 foo는 전역 실행 컨텍스트에 등록된다. 이후 전역 코드가 실행되기 시작하여 전역 변수 x에 값이 할당되고 전역 함수 foo가 호출된다.

// * 2. foo 함수 코드의 평가와 실행
// 전역 함수 foo가 호출되면 전역 코드의 실행은 일시 중단되고 코드의 제어권이 foo 함수 내부로 이동한다. 자바스크립트 엔진은 foo 함수 내부의 함수 코드를 평가하여 foo 함수 실행 컨텍스트를 생성하고
// 호출 스택에 푸시한다. 이때 foo 함수의 지역 변수 y와 중첩 함수 bar가 foo 함수 실행 컨텍스트에 등록된다. 이후 foo 함수 코드가 실행되기 시작하여 지역변수 y에 값이 할당되고 중첩함수 bar가 호출된다.

// * 3. bar 함수 코드의 평가와 실행
// 중첩 함수 bar가 호출되면 foo 함수 코드의 실행은 일시 중단되고 코드의 제어권이 bar함수 내부로 이동한다. 
// 자바스크립트 엔진은 bar함수 내부의 함수 코드를 평가하여 bar 함수 실행 컨텍스트를 생성하고 호출 스택에 푸시한다.
// 이때 bar 함수의 지역변수 z가 bar함수 실행 컨텍스트에 등록된다. 이후, bar 함수 코드가 실행되기 시작하여 지역 변수 z에 값이 할당되고 console.log 메서드를 호출한 이후 bar 함수는 종료된다.

// ? console.log함수 코드의 평가와 실행도 있지만 생략

// * 4. foo 함수 코드로 복귀
// bar 함수가 종료되면 코드의 제어권은 다시 foo 함수로 이동한다. 이때 자바스크립트 엔진은 bar 함수 실행 컨텍스트를 호출 스택에서 팝하여 제거한다.
// 그라고 foo 함수는 더 이상 실행할 코드가 없으므로 종료된다.

//  * 5. 전역 코드로 복귀
// foo 함수가 종료되면 코드의 제어권은 다시 전역 코드로 이동한다. 이때 자바스크립 엔진은 foo 함수 실행 컨텍스트를 호출스택에서 팝하여 제거한다.
// 그리고 더 이상 실행할 전역 코드가 남아 있지 않으므로 전역 실행 컨텍스트도 호출 스택에서 팝되어 호출 스택에는 아무것도 남아있지 않게 된다.

// * 이처럼 호출 스택은 코드의 실행 순서를 관리한다.
// 소스코드가 평가되면 실행 컨텍스트가 생성되고 호출 스택 최상위에 쌓인다. 
// * 호출 스택의 최상위에 존재하는 실행 컨텍스트는 언제나 현재 실행 중인 코드의 실행 컨텍스트이다.
// 따라서 호출 스택의 최상위에 존재하는 실행 컨텍스트를 '실행중인 컨텍스트' 라고 부른다.