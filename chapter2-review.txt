-----------------------------------------------------------------------------------
css 프레임워크를 사용하면 개성이 부족해 질 수 있다..
오픈소스는 사람들이 많이 쓰는것들을 쓰는 것을 추천한다.

antd 프레임워크를 설치할 때 아이콘을 다른 라이브러리로 분리해둘 것을 확인할 수 있는데 이는 아이콘, 이미지 파일등은
용량을 많이 차지 하기때문이다. 즉 최적화를 위해 분리 한것.

내가 웹디자이너가 아니기 때문에 디자인에 시간을 너무 뺏길 우려가 있기 때문에 라이브러리를 사용하고 거기서 필요한 부분을 커스터마이징하는 방향이 효율적이다.
-----------------------------------------------------------------------------------



-----------------------------------------------------------------------------------
- ant design -
[공식 문서]: "We provide antd.js antd.css and antd.min.js antd.min.css under antd/dist in antd's npm package. You can also download these files directly from CDNJS,  or unpkg."

antd의 css까지 적용하기 위해서는 파일마다 
import 'andt/dist/antd.css' 를 입력해서 css파일까지 가져와야 antd의 컴포넌트들에 css까지 입힐 수있다.

* 여기서 추가적으로 알아야 할 점은 원래 js파일 내부에서 css파일을 import하는 것은 안되지만
  next.js를 설치할 때 next에는 웹팩과 css관련 loader가 포함되어 있는데(node_modules/next/package.json에서 확인가능)
  웹팩이 번들링 하는 과정에서 css가 js파일 내에서 import된것을 발견하면 <style>로 바꾼후 html에 적용시킨다.
  웹팩은 img파일 등 확장자 상관없이 파일들을 js에서 사용할 수 있게끔 해준다.(물론 항상 loader가 필요하다.)

파일마다 import 'andt/dist/antd.css'를 입력하는 것을 비효율 적이다.
pages폴더 내 컴포넌트들의 공통 파일인 _app.js에만 import 'andt/dist/antd.css'를 해주면 된다.(어차피 pages의 모든 컴포넌트에 적용되기 때문)
-----------------------------------------------------------------------------------



-----------------------------------------------------------------------------------
- _app.js -
pages의 컴포넌트들은 _app.js가 공통으로 적용된다.(_app.js에서 사용하는 컴포넌트의 이름은 아무이름이나 사용하면 된다.)
prop.Component에 pages의 각 컴포넌트들의 return이 들어가게 되는데 여기서 prop.Component를 <Component />로 return하면 된다.

* prop들은 PropTypes로 모두 점검하는 것을 권장. (사이트의 안정성을 위해)
